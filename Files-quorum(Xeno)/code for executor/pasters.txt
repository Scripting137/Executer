 private void Attachwithapi()
 {

     if (QuorumAPI.QuorumAPI.IsRobloxOpen())
     {
         LogToConsole("Roblox Has been Detected", LogType.INFO);
             QuorumAPI.QuorumAPI.AttachAPI();
             LogToConsole("Sent Injection!", LogType.Success);
     }
     else
     {
         LogToConsole("Roblox not detected!", LogType.ERROR);
     }
 }

 


  private async Task CleaWhiteitor()
  {
      string script = "editor.setValue('')";
      await chromiumWebBrowser1.EvaluateScriptAsync(script);
  }

  private async Task SaveTextAsLua()
  {
      string scriptsPath = Path.Combine(System.Windows.Forms.Application.StartupPath, "Scripts");


      Directory.CreateDirectory(scriptsPath);

      SaveFileDialog saveFileDialog = new SaveFileDialog
      {
          InitialDirectory = scriptsPath,
          Filter = "Lua files (*.lua)|*.lua",
          DefaultExt = "lua",
          Title = "Save Lua File"
      };

      if (saveFileDialog.ShowDialog() == DialogResult.OK)
      {
          string content = await GetEditorContent();
          File.WriteAllText(saveFileDialog.FileName, content);
      }
  }

  private async Task LoadTextFromFile()
  {
      OpenFileDialog openFileDialog = new OpenFileDialog
      {
          Filter = "Lua files (*.lua)|*.lua",
          Title = "Open Lua File"
      };

      if (openFileDialog.ShowDialog() == DialogResult.OK)
      {
          string content = File.ReadAllText(openFileDialog.FileName);
          await chromiumWebBrowser1.EvaluateScriptAsync($"editor.setValue(`{content}`);");
      }
  }



  private async Task<string> GetEditorContent()
  {
      string script = "editor.getValue()";
      var result = await chromiumWebBrowser1.EvaluateScriptAsync(script);
      return result.Result.ToString();
  }

private async Task ExecuteScriptAsync()
{
    string scriptcontent = await GetEditorContent();
   QuorumAPI.QuorumAPI.ExecuteScript(scriptcontent);

}

 private async void Execute()
 {
     if (QuorumAPI.QuorumAPI.IsRobloxOpen())
     {
             await ExecuteScriptAsync();
             LogToConsole("Sent Execution!", LogType.Success);
     }
     else
     {
         LogToConsole("Roblox Not Detected!", LogType.ERROR);
     }
 }

 private void Startup()
 {
     chromiumWebBrowser1.Load(System.Windows.Forms.Application.StartupPath + "\\bin\\MonacoWithTabs\\monaco.html");
	try
{
    string Exe = System.Reflection.Assembly.GetExecutingAssembly().Location;
    string dir = Path.GetDirectoryName(Exe);
    var files = Directory.GetFiles(dir);
    string Executorn = Path.GetFileName(Exe);
    foreach (string file in files)
    {
        string filename = Path.GetFileName(file);
        if (filename.Equals(Executorn, StringComparison.OrdinalIgnoreCase))
            continue;
        try
        {
            File.SetAttributes(file, File.GetAttributes(file) | FileAttributes.Hidden);
        }
        catch { MessageBox.Show("Error on File configuration"); }
    }
}
catch { MessageBox.Show("Error on fetching files"); }      
}



private void Minimize()
{
this.WindowState = FormWindowState.Minimized;
 }
private void Exit()
{
    System.Windows.Forms.Application.Exit();
}

 public enum LogType
 {
     INFO,
     ERROR,
     Warning,
     Success
 }

 public static class ConsoleLogger
 {
     public static Color GetLogColor(LogType type)
     {
         if (type == LogType.INFO)
             return Color.White;
         if (type == LogType.ERROR)
             return Color.Red;
         if (type == LogType.Warning)
             return Color.Yellow;
         if (type == LogType.Success)
             return Color.Green;

         return Color.White;
     }
 }

 private void LogToConsole(string message, LogType type)
 {
     string timestamp = DateTime.Now.ToString("HH:mm");
     Color logColor = ConsoleLogger.GetLogColor(type);

     consoleBox.SelectionStart = consoleBox.TextLength;
     consoleBox.SelectionLength = 0;


     consoleBox.SelectionColor = logColor;
     consoleBox.AppendText($"[ {type} ]");


     consoleBox.SelectionColor = Color.White;
     consoleBox.AppendText($" [{timestamp}] ");


     consoleBox.SelectionColor = logColor;
     consoleBox.AppendText($"{message}\n");

     consoleBox.ScrollToCaret();
 }